
@menu
* Conjugate::
* Addition::
* Negate::
* Subtraction::
* Signum::
* Times::
* Reciprocal::
* Division::
* Magnitude::
* Modulo::
* Exponential::
* Power::
* Natural Logarithm::
* Logarithm::
* Ceiling::
* Maximum::
* Floor::
* Minimum::
* Factorial::
* Binomial::
* Pi Times::
* Circular Functions::
* Roll::
* Deal::
* Grade Up::
* Grade Down::
* Matrix Inverse::
* Matrix Divide::
* Execute::
* Format::
* Base::
* Represent::
* Expand::
* Scan::
* Replicate::
* Reduce::
* Less Than::
* Greater Than::
* Less Than or Equal To::
* Greater Than or Equal To::
* Equal To::
* Not Equal To::
* Logical Not::
* Logical And::
* Least Common Multiple::
* Logical Or::
* Greatest Common Divisor::
* Logical Nand::
* Logical Nor::
* Depth::
* Match::
* Enlist::
* Member Of::
* Find::
* Index::
* Iota::
* Index Of::
* Shape Of::
* Reshape::
* Reverse::
* Rotate::
* Transpose::
* Rearrange::
* First::
* Take::
* Drop::
* Enclose::
* Partition::
* Mix::
* Pick::
* Ravel::
* Catenate::
* Each::
* Inner Product::
* Outer Product::
* Commute::
* Indices::
* Power Operator::
* Identity::
* Right::
* Hide::
* Left::
@end menu

@node Conjugate
@section Conjugate
@cindex Conjugate

Monadic function.

If ⍵ is a real number, return ⍵. If ⍵ is complex, return
⍵ with the imaginary part negated.

@example
      +100
100
      +1J2
1J¯2
      +1J2 2J¯3 ¯3J4
1J¯2 2J3 ¯3J¯4
p
@end example

@node Addition
@section Addition
@cindex Addition

Dyadic function.

The sum of ⍺ and ⍵.

⍺ and ⍵ must be numeric values or arrays.

@example
      1+1
2
      1 2 3 + ¯1 ¯2 ¯3
0 0 0
      1 2 3 + 10
11 12 13
@end example

@node Negate
@section Negate
@cindex Negate

Monadic function.

The additive inverse of ⍵.

⍵ must be a number.

@example
      - 1 2 ¯3
¯1 ¯2 3
@end example

@node Subtraction
@section Subtraction
@cindex Subtraction

Dyadic function.

The difference between ⍺ and ⍵.

⍵ and ⍺ must be numbers.

@example
      1 2 3 - 10
¯9 ¯8 ¯7
      (2 2⍴⍳4) - 10
¯9 ¯8
¯7 ¯6
@end example

@node Signum
@section Signum
@cindex Signum

Monadic function.

For ⍵ = 0: 0
Otherwise: ⍵ divided by Magnitude of ⍵.

@example
      ×10 ¯10 0 3J¯2
1 ¯1 0 0.8320502943J¯0.5547001962
@end example

@node Times
@section Times
@cindex Times

Dyadic function.

The product of ⍺ and ⍵.

⍺ and ⍵ must be numbers.

@example
      1 2 3 × ¯1
¯1 ¯2 ¯3
      0J¯1 × 0J¯1
¯1
@end example

@node Reciprocal
@section Reciprocal
@cindex Reciprocal

Monadic function.

The multiplicative inverse of ⍵.

⍵ must be nonzero number.

@example
      ÷ 10 ¯10 2 3J¯2
0.1 ¯0.1 0.5 0.2307692308J0.1538461538
@end example

@node Division
@section Division
@cindex Division

Dyadic function.

The quotient of ⍺ and ⍵.

⍺ and ⍵ must be numbers. Signals the error if If ⍵ is 0 and ⍺ is not 0. If ⍵
is 0 and ⍺ is 0 returns 1.

@example
      1 2 0 1J2 ÷ 2 2 0 1J1
0.5 1 1 1.5J0.5
@end example

@node Magnitude
@section Magnitude
@cindex Magnitude

Monadic function.

The absolute value of ⍵.

Returns the larger of ⍵ and ¯⍵.

@example
      |5 ¯5 5.4567 6J¯1 ¯3E10
5 5 5.4567 6.08276253 3E10
@end example

@node Modulo
@section Modulo
@cindex Modulo

Dyadic function.

The remainder in the euclidian division of ⍵ by ⍺.

@example
      5|3
3
      3|5
2
      7|20
6
      6.5|32.75
0.25
@end example

@node Exponential
@section Exponential
@cindex Exponential

Monadic function.

e to the ⍵th power.

⍵ must be a number. Raise the base of the natural algorithm e (2.718281@dots{})
to the power of ⍵.

@example
*1
2.718281828
      *0 0J1
1 0.5403023059J0.8414709848
@end example

@node Power
@section Power
@cindex Power

Dyadic function.

⍺@math{^⍵}

⍺ and ⍵ must be numbers.

@example
      2*3 ¯2 1j2
8 0.25 0.3669139495J1.966055481
@end example

@node Natural Logarithm
@section Natural Logarithm
@cindex Natural Logarithm

Monadic function.


logₑ⍵.

⍵ must be a number.

@example
      ⍟1
0
      ⍟2
0.6931471806
      ⍟2.71828
0.9999993273
@end example

@node Logarithm
@section Logarithm
@cindex Logarithm

Dyadic function.

log@math{_⍺} ⍵

⍺ and ⍵ must be numbers.

@example
      2⍟8
3
      4⍟1464
5.257849919
      1.618⍟2.718
2.077962166
@end example

@node Ceiling
@section Ceiling
@cindex Ceiling

Monadic function.

Smallest Integer ≮ ⍵.

⍵ must be a number.

@example
      ⌈1.6 ¯1.6 ¯1.6J¯1 ¯1.6E10 1.6E¯2
2 ¯1 ¯1J¯1 ¯16000000000 1
@end example

@node Maximum
@section Maximum
@cindex Maximum

Dyadic function.

⍺ or ⍵, whichever is greater.

⍺ and ⍵ must be numbers.

@example
      1 2 3 4 5 6⌈6 5 4 3 2 1
6 5 4 4 5 6
@end example

@node Floor
@section Floor
@cindex Floor

Monadic function.

Largest Integer ≯ ⍵.

⍵ must be a number.

@example
      ⌊1.6 ¯1.6 ¯1.6J¯1 ¯1.6E10 1.6E¯2
1 ¯2 ¯2J¯1 ¯16000000000 0
@end example

@node Minimum
@section Minimum
@cindex Minimum

Dyadic function.

⍺ or ⍵, whichever is lesser.

⍺ and ⍵ must be numbers.

@example
      1 2 3 4 5 6⌊6 5 4 3 2 1
1 2 3 3 2 1
@end example

@node Factorial
@section Factorial
@cindex Factorial

Monadic function.

If ⍵ is a positive integer: product of Integers ⍳⍵. If ⍵ is a real or 0:
Gamma ⍵+1.

Equivalent to ×/⍳⍵. ⍵ must be a non-negative number.


@example
      ! 2 5 0 1.6
2 120 1 1.429624559
@end example

@node Binomial
@section Binomial
@cindex Binomial

Dyadic function.

The number of ways to pick a unique set of ⍺ arguments out of ⍳⍵.

⍺ and ⍵ must be numbers. If ⍺ is a negative integer, the result will be 0 (as
it would be an infinity). Otherwise, this is defined in terms of
@{(!⍵)÷(!⍺)×!(⍵-⍺)@}.

@example
0 1 2 3 4 5 ! 5
1 5 10 10 5 1
      0 1 2 3 4 5 ! 5.5
1 5.5 12.375 14.4375 9.0234375 2.70703125
      ¯0 ¯1 ¯2 ¯3 ¯4 ¯5 ! 5
1 0 0 0 0 0
      ¯0 ¯1 ¯2 ¯3 ¯4 ¯5 ! ¯5
1 0 0 0 0 1
      0.5 1.5 2.5 3.5 4.5 5.5 ! 5
2.586899392 7.760698177 10.86497745 7.760698177 2.586899392 0
      0.5 1.5 2.5 3.5 4.5 5.5 ! 5.5
2.70703125 9.0234375 14.4375 12.375 5.5 1
@end example

@node Pi Times
@section Pi Times
@cindex Pi Times

Monadic function.

⍵×ᴨ.

⍵ must be a number. Get value of ᴨ with o1.

@example
      ○1
3.141592654
      ○2
6.283185307
      ○○1
9.869604401
      ÷○1
0.3183098862
@end example

@node Circular Functions
@section Circular Functions
@cindex Circular Functions

Dyadic function.

Varies.

Trigonometric functions of B selected by A

The value of ⍺ selects one of the following functions. In all cases, ⍵ must
be a number.

@example
    ⍺=  0:   Z ← (1-⍵×⍵)⋆0.5
    ⍺= ¯1:   Z ← arcsin ⍵               ⍺= 1:   Z ← sin ⍵
    ⍺= ¯2:   Z ← arccos ⍵               ⍺= 2:   Z ← cos ⍵
    ⍺= ¯3:   Z ← arctan ⍵               ⍺= 3:   Z ← tan ⍵
    ⍺= ¯4:   Z ← sqrt(¯1+⍵×⍵)           ⍺= 4:   Z ← sqrt(1+⍵×⍵)
    ⍺= ¯5:   Z ← arcsinh ⍵              ⍺= 5:   Z ← sinh ⍵
    ⍺= ¯6:   Z ← arccosh ⍵              ⍺= 6:   Z ← cosh ⍵
    ⍺= ¯7:   Z ← arctanh ⍵              ⍺= 7:   Z ← tanh ⍵
    ⍺= ¯8:   Z ← -(8○⍵)                 ⍺= 8:   Z ← -sqrt(¯1+⍵×⍵) if ⍵ ≥ 0
                                                Z ←  sqrt(¯1+⍵×⍵) if ⍵ < 0
    ⍺= ¯9:   Z ← ⍵                      ⍺= 9:   Z ← Real part of ⍵
    ⍺=¯10:   Z ← +⍵                     ⍺=10:   Z ← |⍵
    ⍺=¯11:   Z ← 0J1×⍵                  ⍺=11:   Z ← Imaginary part of ⍵
    ⍺=¯12:   Z ← ⋆0J1×⍵                 ⍺=12:   Z ← Arc ⍵
@end example

@node Roll
@section Roll
@cindex Roll

Monadic function.

Integer Randomly Selected from ⍳⍵.

⍵ must be a positive integer. Repeats are possible if on an array.

@example
      ? 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50
34 25 31 26 2 29 3 21 17 30 27 35 31 36 24 46 1
@end example

@node Deal
@section Deal
@cindex Deal

Dyadic function.

A distinct set of integers selected randomly from ⍳⍵.

Does not work with arrays on either side. Both ⍺ and ⍵ must be positive
integers such that ⍺ ≯ ⍵, or both must be 0 (in which case nothing is
returned).

@example
      5?5
1 5 3 4 2
      5?50
11 43 41 22 14
      0?0
@end example

@node Grade Up
@section Grade Up
@cindex Grade Up

Monadic or Dyadic function.

Returns an array of the same length as ⍵ such that Indexing into the
arguments will sort ⍵ in ascending order.

Dyadically, the sorted order is defined by ⍺ being ascendingly sorted, with
both stable sorting for duplicates, and unmatched values partitioned to the
end.

@example
⍝ Monadic
      ⎕←A←'foo' 'bar' 'baz'
 foo bar baz
      ⍋A
2 3 1
      A[⍋A]
 bar baz foo
      ⎕←B←3 1⍴'foo' 'bar' 'baz'
 foo
 bar
 baz
      ⍋B
2 3 1
      B[⍋B;]
 bar
 baz
 foo
⍝ Dyadic
      'ABCDEFGHIJKLMNOPQRSTUVWXYZ'⍋'ZAM,.BIA'
2 8 6 7 3 1 4 5
      'ZAM,.BIA'['ABCDEFGHIJKLMNOPQRSTUVWXYZ'⍋'ZAM,.BIA']
AABIMZ,.
@end example

@node Grade Down
@section Grade Down
@cindex Grade Down

Monadic or Dyadic function.

Returns an array of the same length as ⍵ such that Indexing into the
arguments will sort ⍵ in descending order.

Dyadically, the sorted order is defined by ⍺ being ascendingly sorted, with
both stable sorting for duplicates, and unmatched values partitioned to the
beginning.

@example
⍝ Monadic
      ⎕←A←'foo' 'bar' 'baz'
 foo bar baz
      ⍒A
1 3 2
      A[⍒A]
 foo baz bar
      ⎕←B←3 1⍴'foo' 'bar' 'baz'
 foo
 bar
 baz
      ⍒B
1 3 2
      B[⍒B;]
 foo
 baz
 bar
⍝ Dyadic
      'ZAM,.BIA'['ABCDEFGHIJKLMNOPQRSTUVWXYZ'⍒'ZAM,.BIA']
,.ZMIBAA
@end example

@node Matrix Inverse
@section Matrix Inverse
@cindex Matrix Inverse

Monadic function.

For square array of rank 2 or higher: Return the Inverse of the Array.

For non-square arrays, given the count of rows > columns: The Moore-Penrose
Inverse of the Array: @code{(+⍉⍵)⌹(+⍉⍵)+.×⍵}.

For vectors (rank 1 arrays with more than 1 item): The Moore-Penrose Inverse
of the Vector: @code{@{(+⍵)÷⍵+.×+⍵@}}.

Note that due to the nature of floating point numbers, rounding errors may
occur, and need to be dealt with appropriately.

@example
⍝ Square
       ⎕←M←2 2⍴3 4 4 5
3 4
4 5
      ⎕←R←⌹M
¯5  4
 4 ¯3
      R+.×M
1 3.552713679E¯15
0 1.000000000E0
      ⌈R+.×M
1 0
0 1

       ⎕←M←3 3⍴3 4 4 5
3 4 4
5 3 4
4 5 3
      ⎕←R←⌹M
¯0.4782608696   0.347826087    0.1739130435
 0.04347826087 ¯0.3043478261   0.347826087
 0.5652173913   0.04347826087 ¯0.4782608696
      ⌈R+.×M
1 0 0
0 1 0
0 0 1
⍝ Non-Square
      ⌹ 3 2⍴⍳6
¯1.333333333 ¯0.3333333333  0.6666666667
 1.083333333  0.3333333333 ¯0.4166666667
      3 2⍴⍳6
1 2
3 4
5 6
      Alt←@{(+⍉⍵)⌹(+⍉⍵)+.×⍵@}
      Alt 3 2⍴⍳6
¯1.333333333 ¯0.3333333333  0.6666666667
 1.083333333  0.3333333333 ¯0.4166666667
⍝ Vectors
      ⌹ 5 2
0.1724137931 0.06896551724
      Alt2←@{(+⍵)÷⍵+.×+⍵@}
      Alt2 5 2
0.1724137931 0.06896551724
@end example

@node Matrix Divide
@section Matrix Divide
@cindex Matrix Divide

For square arrays of rank 2 or lower: The result of multiplying ⍺ by the
inverse of ⍵, treating both as matrices.

For scalar values: The quotient of ⍺ and ⍵.

For real vectors: The scalar coefficient needed to express ⍺ in terms of ⍵
(which can then be used to project ⍺ onto ⍵).

If ⍺ is a vector and ⍵ is a matrix: The Solution or Linear Least Squares of a
system of equations or points, treating each row of ⍵ as the coefficients/1,
x coordinates and each member of ⍺ as the result/y coordinates for each.

@example
⍝ Matrices
      ⎕←MatrixA←2 2⍴1 2 3 4
1 2
3 4
      ⎕←MatrixB←2 2⍴5 6 7 8
5 6
7 8
      MatrixA ⌹ MatrixB
 5  4
¯4 ¯3
⍝ Vectors
      ⎕←VectorA←2 7
2 7
      ⎕←VectorB←3 1
3 1
      VectorA⌹VectorB
1.3
      (VectorA +.× VectorB)÷(VectorB +.× VectorB)

1.3
      (⌹VectorB)+.×VectorA

1.3
      ⎕←Projection←(VectorA⌹VectorB)×VectorB
3.9 1.3
      ⎕←Orthogonal←-(VectorA)-⍨Projection
¯1.9 5.7
      VectorA≡Projection+Orthogonal
1
⍝ Scalars
7÷21
0.3333333333
      7⌹21
0.3333333333
⍝ Solve A System Of Equations
⍝ Ex: x + 2y = 2 and 3x + 4y = 7
      VectorA⌹MatrixA
3 ¯0.5
⍝ Check
      (3 + (2×¯0.5) - 2) = ((3×3) + (4×¯0.5) - 7)
1
⍝ Ex: 5x + 6y = 3 and 7x + 8y = 1
      VectorB⌹MatrixB
¯9 8
⍝ Check
      ((5×¯9) + (6×8) - 3)=((7×¯9) + (8×8) - 1)
1
⍝ Linear Least Squares
⍝ Input Points: (1, 5) (2, 1) (3, 4) (4, 2) (5, 8)
      ⎕←X←1,⍪⍳5
1 1
1 2
1 3
1 4
1 5
      ⎕←Y←5 1 4 2 8
5 1 4 2 8
      Y⌹X
1.9 0.7
⍝ Answer is y = 1.9 + 0.7x
⍝ Input Points: (1, 7) (2, 1) (3, 4) (4, 6) (5, 4)
      ⎕←Y←7 1 4 6 4
7 1 4 6 4
      Y⌹X
4.7 ¯0.1
⍝ Answer is y = 4.7 + ¯0.1x
@end example

@node Execute
@section Execute
@cindex Execute

Monadic function.

Result of evaluating ⍵ as APL Code.

⍵ must be a character array/string.

@example
      ⍎'!5'
120
@end example

@node Format
@section Format
@cindex Format

Monadic or Dyadic function.

Monadically: ⍵ as a character array.

Dyadically: ⍵ as a character array, formatted accoring to ⍺.

If ⍺ is a tuple that is a pair of integers, the first denotes the field
length for each member and the second denotes the number of decimal places to
use for numbers (if ⍵ is a numeric array).

If ⍺ is a character array, format ⍵ according to the examples given in that
array.

⍵ is expected to be either a numeric array, or a character array. If ⍵ is a
character array: ⍺ must be a tuple, and the second integer in the ⍺ tuple is
ignored. If the first integer in the ⍺ tuple is omitted (or zero), it is like
'auto', which adds 1 to the size of each field. This is the same for negative
integers, but only for ⍵ character arrays. Uninterpretable ⍺ character arrays
throw an error, as does an ⍺ character array if ⍵ contains a complex number.

@example
⍝ Tuple as ⍺ with string
0⍕String
 T h i s   i s   a   T e s t
      1⍕String
 T h i s   i s   a   T e s t
      2⍕String
 T h i s   i s   a   T e s t
      1 0⍕String
This is a Test
      2 0⍕String
 T h i s   i s   a   T e s t
      0 0⍕String
 T h i s   i s   a   T e s t
      4 0⍕String
   T   h   i   s       i   s       a       T   e   s   t
      ¯1 0⍕String
This is a Test
      ¯100 0⍕String
This is a Test
⍝ Tuple as ⍺ with numbers
      0⍕Numbers
 1464 2 61000
      1⍕Numbers
 1464.0 1.6 61000.0
      2⍕Numbers
 1464.00 1.62 61000.00
      6 0⍕Numbers
  1464     2 61000
      6 1⍕Numbers
⍝ Number Array Limitations
DOMAIN ERROR
      6 1⍕Numbers
      ^   ^
      7 1⍕Numbers
 1464.0    1.661000.0
      8 1⍕Numbers
  1464.0     1.6 61000.0
      0 1⍕Numbers
 1464.0 1.6 61000.0
      ¯100 1⍕Numbers
DOMAIN ERROR
      ¯100 1⍕Numbers
      ^      ^
      ¯1 1⍕Numbers
DOMAIN ERROR
      ¯1 1⍕Numbers
      ^    ^
⍝ String as ⍺ with numbers only
      '2222 2.22222 2E10'⍕Numbers
1464 1.618   6E4
      '2222 2.22222 2E1'⍕Numbers
1464 1.618   6E4
      '2222 Hello 2.22222 World 2E1'⍕Numbers
1464 Hello 1.618   World 6E4
      '2E1 Hello 2.22222 World 222222'⍕Numbers
1E3 Hello 1.618    World 61000
⍝ Complex Number Limitations
      '1J1'⍕1J1
DOMAIN ERROR
      '1J1'⍕1J1
      ^    ^
      '1 1'⍕1J1
LENGTH ERROR
      '1 1'⍕1J1
      ^    ^
      '1.0'⍕1J1
DOMAIN ERROR
      '1.0'⍕1J1
      ^    ^
@end example

@node Base
@section Base
@cindex Base

Dyadic function.

Return ⍵ in base-10 assuming it is currently in the base defined by ⍺.

⍺ must be a number, and ⍵ must be an array of numbers. If ⍵ is a matrix,
operate on columns.


@example
      2⊥0 1 1 0
6
      3⊥0 1 1 0
12
      4⊥0 1 1 0
20
      5⊥0 1 1 0
30
      10⊥0 1 1 0
110
      ¯1⊥0 1 1 0
0
      ¯100⊥0 1 1 0
9900
      ¯2⊥0 1 1 0
2
      ¯3⊥0 1 1 0
6
      0⊥0 1 1 0
0
      ¯2⊥0 1 1 0
2
      ¯2⊥0 0 1 0
¯2
      ¯2.2⊥0 0 1 0
¯2.2
      2.2⊥0 0 1 0
2.2
      2.2⊥0 2 0 0
9.68
      2E2⊥0 2 0 0
80000
      0J1⊥0 1 1 0
¯1J1
      0J1⊥0 1 1.1 0
¯1J1.1
      2⊥0 1 1.1 0
6.2
      4 2⍴0 1 1 0 0 1 1 0
0 1
1 0
0 1
1 0
      2⊥(4 2⍴0 1 1 0 0 1 1 0)
5 10
@end example

@node Represent
@section Represent
@cindex Represent

Dyadic function.

An array representing ⍵ encoded by using ⍺ as the ranks.

For encoding to bases, ⍺ needs not only the base, but the base repeated for
each rank. This, however, allows for converting mixed base values easily. If
⍺ is a matrix, then each column is used individually to represent ⍵.

@example
      Number←1464
      (16⍴2)⊤Number
0 0 0 0 0 1 0 1 1 0 1 1 1 0 0 0
      0 7 24 60⊤Number
0 1 0 24
      16 3⍴2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
2 8 10
      Number⊤⍨16 3⍴2 8 10
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
1 0 0
0 0 0
1 0 0
1 0 0
0 0 0
1 0 0
1 0 0
1 2 1
0 6 4
0 7 6
0 0 4
@end example

@node Expand
@section Expand
@cindex Expand

Dyadic function.

Inserts 0s or spaces in ⍵ according to the boolean mask in ⍺.

⍺ must be a boolean vector with the same number of true values as the length
of ⍵, unless ⍺ is a scalar (length of one). Can be called to operate on the
last axis, or the first.

@example
      1 0 1 0 0 1\'abc'
a b  c
      1 0 1 0 0 1\'a'
a a  a
      1 0 1 0 0 1\1 2 3
1 0 2 0 0 3
      1 0 1 0 0 1\1
1 0 1 0 0 1
⍝ First vs Last Axis
TABLE←2 5⍴⍳10
      TABLE
1 2 3 4  5
6 7 8 9 10
⍝ Last
      0 1 1 1 1 1\TABLE
0 1 2 3 4  5
0 6 7 8 9 10

      0 1 1⍀TABLE
0 0 0 0  0
1 2 3 4  5
6 7 8 9 10
⍝ You can just use axis indexing instead, too.
      0 1 1 1 1 1⍀[2]TABLE
0 1 2 3 4  5
0 6 7 8 9 10
      0 1 1\[1]TABLE
0 0 0 0  0
1 2 3 4  5
6 7 8 9 10
@end example

@node Scan
@section Scan
@cindex Scan

Monadic Operator.

An array representing the results of reducing ⍵ with ⍺, but containing each
intermediate result instead of just the final result.

Also known as a cumulative reduction. ⍺ must be a dyadic function.

@example
      +\⍳5
1 3 6 10 15
      -\⍳5
1 ¯1 2 ¯2 3
      ×\⍳5
1 2 6 24 120
      ÷\⍳5
1 0.5 1.5 0.375 1.875
      ∧\⍳5
1 2 6 12 60
      ∨\32×10?20
160 32 32 32 32 32 32 32 32 32
@end example

@node Replicate
@section Replicate
@cindex Replicate

Dyadic function.

A representation of ⍵ with each element repeated i⌷⍺ times.

⍺ must be an array with the same length as ⍵, made up of positive
integers. If ⍺ is made up entirely of booleans (1 and 0), then this is
synonymous with "Compress" (with ⍺ acting as a boolean mask). ⍵ can be an
array of numbers or characters (a string). Can be called on the first or last
axis.

@example
0 3 0 1 0/A
2 2 2 4
      0 3 0 1 0/B
eeel
      0 3 0 1 0/C
dddf
      0 3 0 1 0/D
2 2 2 4
e e e l
d d d f
      0 3 0 1 0⌿D
LENGTH ERROR
      0 3 0 1 0⌿D
      ^         ^
      0 3 0⌿D
Hello
Hello
Hello
@end example

@node Reduce
@section Reduce
@cindex Reduce

Monadic or Dyadic Operator.

A function that will apply fn to subarrays of ⍵ of a length equal to the
magnitude of ⍺ from left to right (or right to left, if ⍺ is negative, or not
at all if 0 (see example)), treating the total so far as ⍺ and the next
member as ⍵ when calling the function, and which will return the total after
all members have been processed.

If ⍺ is @emph{not} specified (fn <this> ⍵) then ⍺ is considered to be the length
of ⍵: That is, it will return the result of applying fn from left to right
across the entire array ⍵, starting with the first element as ⍺ and the
second as ⍵, and then the cumulative total as ⍺ and the next element as ⍵
until the entire array has been processed.

fn must be a dyadic function. ⍺ must be a number of magnitude less than the
length of ⍵, and ⍵ must be an array of valid arguments for both sides of
fn. Can be called on the first or last axis.

#+begin@math{_src} gnu-apl
⍝ Numeric Array
      +/1 2 3 4 5
15
      5+/1 2 3 4 5
15
      4+/1 2 3 4 5
10 14
      3+/1 2 3 4 5
6 9 12
      2+/1 2 3 4 5
3 5 7 9
      1+/1 2 3 4 5
1 2 3 4 5
      0+/1 2 3 4 5
0 0 0 0 0 0
⍝ Addition is communitive, so these will mirror the above.
      ¯1+/1 2 3 4 5
1 2 3 4 5
      ¯2+/1 2 3 4 5
3 5 7 9
      ¯3+/1 2 3 4 5
6 9 12
      ¯4+/1 2 3 4 5
10 14
      ¯5+/1 2 3 4 5
15
⍝ Character Array
⍝ Note the initial spaces, which is the 'identity'.

@node Less Than
@section Less Than
@cindex Less Than

Wheter ⍺ is less than ⍵, either numerically or lexographically: If so, 1. If
not, 0.

⍺ and ⍵ must either be of the same length, or ⍺ must be of length 1.

@example
      1 < 2
1
      2 < 1
0
      'a' < 'b'
1
      'b' < 'a'
0
      'apple' < 'banan'
1 0 0 0 1
      'apples' < 'banana'
1 0 0 0 1 0
      'a' < 'banana'
1 0 1 0 1 0
@end example

@node Greater Than
@section Greater Than
@cindex Greater Than

Wheter ⍺ is greater than ⍵, either numerically or lexographically: If so, 1. If
not, 0.

⍺ and ⍵ must either be of the same length, or ⍺ must be of length 1.

@example
      1 < 1
0
      1 > 2
0
      2 > 1
1
      'a' > 'b'
0
      'b' > 'a'
1
      'apple' > 'banan'
0 1 1 1 0
      'apples' > 'banana'
0 1 1 1 0 1
      'a' > 'banana'
0 0 0 0 0 0
@end example

@node Less Than or Equal To
@section Less Than or Equal To
@cindex Less Than or Equal To

Wheter ⍺ is no greater than ⍵, either numerically or lexographically: If
so, 1. If not, 0.

⍺ and ⍵ must either be of the same length, or ⍺ must be of length 1.

@example
      1 ≤ 2
1
      2 ≤ 1
0
      'a' ≤ 'b'
1
      'b' ≤ 'a'
0
      'apple' ≤ 'banan'
1 0 0 0 1
      'apples' ≤ 'banana'
1 0 0 0 1 0
      'a' ≤ 'banana'
1 1 1 1 1 1
@end example

@node Greater Than or Equal To
@section Greater Than or Equal To
@cindex Greater Than or Equal To

Wheter ⍺ is no less than ⍵, either numerically or lexographically: If
so, 1. If not, 0.

⍺ and ⍵ must either be of the same length, or ⍺ must be of length 1.

@example
      1 ≥ 2
0
      2 ≥ 1
1
      'a' ≥ 'b'
0
      'b' ≥ 'a'
1
      'apple' ≥ 'banan'
0 1 1 1 0
      'apples' ≥ 'banana'
0 1 1 1 0 1
      'a' ≥ 'banana'
0 1 0 1 0 1

@end example

@node Equal To
@section Equal To
@cindex Equal To

Wheter ⍺ is equal to ⍵, either numerically or lexographically: If so, 1. If
not, 0.

⍺ and ⍵ must either be of the same length, or ⍺ must be of length 1.

@example
      1 = 2
0
      2 = 1
0
      'a' = 'b'
0
      'b' = 'a'
0
      'apple' = 'banan'
0 0 0 0 0
      'apples' = 'banana'
0 0 0 0 0 0
      'a' = 'banana'
0 1 0 1 0 1
@end example

@node Not Equal To
@section Not Equal To
@cindex Not Equal To

Wheter ⍺ is not equal to ⍵, either numerically or lexographically: If
so, 1. If not, 0.

⍺ and ⍵ must either be of the same length, or ⍺ must be of length 1. If the
arguments are booleans, this functions like XOR@.

@example
      1 ≠ 2
1
      2 ≠ 1
1
      'a' ≠ 'b'
1
      'b' ≠ 'a'
1
      'apple' ≠ 'banan'
1 1 1 1 1
      'apples' ≠ 'banana'
1 1 1 1 1 1
      'a' ≠ 'banana'
1 0 1 0 1 0
@end example

@node Logical Not
@section Logical Not
@cindex Logical Not

Returns the logical negation of ⍵.

⍵ must be a Boolean (0 or 1), or an array thereof.

@example
      ~0
1
      ~1
0
      ~1 0 0 0 1 1 1 0 1 0 1
0 1 1 1 0 0 0 1 0 1 0
      ~ 'a' = 'b'
1
      ~ 'a' = 'a'
0
@end example

@node Logical And
@section Logical And
@cindex Logical And

True (1) if both ⍺ and ⍵ are true, false (0) otherwise.

⍺ and ⍵ must be booleans, and must be of the same length or ⍺ must be
length 1. Also called Logical Conjunction.

@example
      1 ∧ 1
1
      1 ∧ 0
0
      0 ∧ 1
0
      0 ∧ 0
0
      1 0 ∧ 0 1
0 0
@end example

@node Least Common Multiple
@section Least Common Multiple
@cindex Least Common Multiple

The smallest number that has both ⍺ and ⍵ as factors.

⍺ and ⍵ must be numbers

@example
      1 2 ∧ 0 1
0 2
      1.1 ∧ 2.2
2.2
      1.1 ∧ 2.3
25.3
      1.1 ∧ 0
0
      1.1 ∧ ¯2.3
¯25.3
      2.5 1.1 ∧ ¯2.3 6
¯57.5 66
      1 2 ∧ 3 4
3 4
      1 2 ∧ 4 3
4 6
@end example

@node Logical Or
@section Logical Or
@cindex Logical Or

True (1) if either ⍺ or ⍵ is true, false (0) otherwise.

⍺ and ⍵ must be booleans, and must be of the same length or ⍺ must be
length 1. Also called Logical Disjunction.

@example
      1 0 0 1 0 1 1 1 0 1 ∨ 0 0 1 0 0 1 1 0 0 1
0 0 1 0 0 1 1 0 0 1
      1 ∨ 0 1 1 0 1 0 1
1 1 1 1 1 1 1
      0 ∨ 0 1 1 0 1 0 1
0 1 1 0 1 0 1
@end example

@node Greatest Common Divisor
@section Greatest Common Divisor
@cindex Greatest Common Divisor

The largest number which divides evenly into both ⍺ and ⍵.

⍺ and ⍵ must be numbers.

@example
      1.1 ∨ 2.2
1.1
      1.1 ∨ 0
1.1
      1.1 ∨ ¯2.3
0.1
      2.5 1.1 ∨ ¯2.3 6
0.1 0.1
      2.6 1.1 ∨ ¯2.3 6
0.1 0.1
      12.12 1.1 ∨ ¯2.3 6
0.02 0.1
@end example

@node Logical Nand
@section Logical Nand
@cindex Logical Nand

False (0) if both ⍺ and ⍵ are True (1), true otherwise.

⍺ and ⍵ must be booleans, and must be of the same length or ⍺ must be
length 1.

@example
      1 0 0 1 0 1 1 1 0 1 ⍲ 0 0 1 0 0 1 1 0 0 1
1 1 1 1 1 0 0 1 1 0
      1 ⍲ 0 0 1 0 0 1 1 0 0 1
1 1 0 1 1 0 0 1 1 0
      0 ⍲ 0 0 1 0 0 1 1 0 0 1
1 1 1 1 1 1 1 1 1 1
@end example

@node Logical Nor
@section Logical Nor
@cindex Logical Nor

False (0) if either ⍺ or ⍵ are True (1), true otherwise.

⍺ and ⍵ must be booleans, and must be of the same length or ⍺ must be
length 1.

@example
      1 0 0 1 0 1 1 1 0 1 ⍱ 0 0 1 0 0 1 1 0 0 1
0 1 0 0 1 0 0 0 1 0
      0 ⍱ 0 0 1 0 0 1 1 0 0 1
0 0 0 0 0 0 0 0 0 0
      0 ⍱ 0 0 1 0 0 1 1 0 0 1
1 1 0 1 1 0 0 1 1 0
@end example

@node Depth
@section Depth
@cindex Depth

The number of levels of nesting in ⍵.



@example
      ≡ 1
0
      ≡ 1 2 3 4 5
1
      ≡ (1 2 3 4 5) (6 7 8 9 10)
2
      ≡ ((1 2 3 4 5) (6 7 8 9 10)) "Hello"
3
@end example

@node Match
@section Match
@cindex Match

True (1) if ⍺ and ⍵ have the same shape and ravel. False (0) otherwise.

@example
      1 ≡ 1
1
      1 ≡ 1 2
0
      1 3 ≡ 1 2
0
      1 2 ≡ 1 2
1
      1 2 ≡ 1 2
      "Hello" ≡ "Hello"
1
      "Hello" ≡ "Helloo"
0
@end example

@node Enlist
@section Enlist
@cindex Enlist

A simple vector of all simple scalar values in ⍵, regardless of nesting.

Differs from Ravel in that it flattens over all layers of nesting.

@example
      'MIS' 'SIS' 'SIP' 'PI'
 MIS SIS SIP PI
      ∊'MIS' 'SIS' 'SIP' 'PI'
MISSISSIPPI
      ,'MIS' 'SIS' 'SIP' 'PI'
 MIS SIS SIP PI
      2 2⍴'MIS' 'SIS' 'SIP' 'PI'
 MIS SIS
 SIP PI
      ,(2 2⍴'MIS' 'SIS' 'SIP' 'PI')
 MIS SIS SIP PI
      ∊(2 2⍴'MIS' 'SIS' 'SIP' 'PI')
MISSISSIPPI
      ∊2 2⍴'WHICH' 'WAY' 2 'GO'
WHICHWAY 2 GO
      ,2 2⍴'WHICH' 'WAY' 2 'GO'
 WHICH WAY 2 GO
@end example

@node Member Of
@section Member Of
@cindex Member Of

True (1) if ⍺ is present in ⍵. False (0) otherwise.

If used on nested arrays, each element is tested for an exact match.
@example
      'PROGRAMMING'∊'DEVELOPMENT'
1 0 1 0 0 0 1 1 0 1 0
      'E'∊'DEVELOPMENT'
1
      'EV'∊'DEVELOPMENT'
1 1
      'TREE' 'DEVELOPMENT'∊'DEVELOPMENT'
0 0
      'TREE' 'DEVELOPMENT'∊'DEVELOPMENT' 'PROCESS'
0 1
@end example

@node Find
@section Find
@cindex Find

A boolean mask showing the starting point of ⍺ in ⍵, if it exists. An all
false (0) mask otherwise.

@example
      'A'⍷'APL AS A LANGUAGE'
1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0
      'GUA'⍷'APL AS A LANGUAGE'
0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
      'QUA'⍷'APL AS A LANGUAGE'
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
@end example

@node Index
@section Index
@cindex Index

The result of extracting the element at index ⍺ from ⍵.

⍺ must be a vector whose length equals the rank of ⍵, and with a depth no
more than 2.

@example
      1⌷'STOP'
S
      (⊂2 3 4 1)⌷'STOP'
TOPS
      (⊂4 3 2 1)⌷'STOP'
POTS
      (⊂1 4 3 2 )⌷'STOP'
SPOT
      (⊂1 4 3 2 3 4 1 )⌷'STOP'
SPOTOPS
      (⊂1 4 3 2 3 4 1 )⌷'STOP'
@end example

@node Iota
@section Iota
@cindex Iota

A vector of the first ⍵ integers (starting from the index origin).

If ⍵ is an array, return the result of each applied according to the
indicies: A length two array will show the permutations of the first element
on the first axis, and the second on the second, for instance.

@example
     ⍳5
1 2 3 4 5
      ⍳5 2
 1 1  1 2
 2 1  2 2
 3 1  3 2
 4 1  4 2
 5 1  5 2
      ⍳5 1
 1 1
 2 1
 3 1
 4 1
 5 1
      ⍳5 3
 1 1  1 2  1 3
 2 1  2 2  2 3
 3 1  3 2  3 3
 4 1  4 2  4 3
 5 1  5 2  5 3
      ⍳5 4
 1 1  1 2  1 3  1 4
 2 1  2 2  2 3  2 4
 3 1  3 2  3 3  3 4
 4 1  4 2  4 3  4 4
 5 1  5 2  5 3  5 4
      ⍳5 2 5
 1 1 1  1 1 2  1 1 3  1 1 4  1 1 5
 1 2 1  1 2 2  1 2 3  1 2 4  1 2 5

 2 1 1  2 1 2  2 1 3  2 1 4  2 1 5
 2 2 1  2 2 2  2 2 3  2 2 4  2 2 5

 3 1 1  3 1 2  3 1 3  3 1 4  3 1 5
 3 2 1  3 2 2  3 2 3  3 2 4  3 2 5

 4 1 1  4 1 2  4 1 3  4 1 4  4 1 5
 4 2 1  4 2 2  4 2 3  4 2 4  4 2 5

 5 1 1  5 1 2  5 1 3  5 1 4  5 1 5
 5 2 1  5 2 2  5 2 3  5 2 4  5 2 5
@end example

@node Index Of
@section Index Of
@cindex Index Of

The index at which each member of ⍵ appears in ⍺. If ⍵ doesn't exist in ⍺,
then the length of ⍺ + 1 (really 1+¯1↑⍳⍴⍺).

@example
      2⍳ 1 2 3
2 1 2
      3⍳ 1 2 3
2 2 1
      4⍳ 1 2 3
2 2 2
      2⍳ 1 2 3
2 1 2
      2⍳ 1 2 3 4
2 1 2 2
      'APL'⍳ 'APLAPLAPLLPA'
1 2 3 1 2 3 1 2 3 3 2 1
      'APL'⍳ 'QAPLAPLAPLLPA'
4 1 2 3 1 2 3 1 2 3 3 2 1
      1+¯1↑⍳⍴'APL'
4
      ''⍳ 'QAPLAPLAPLLPA'
1 1 1 1 1 1 1 1 1 1 1 1 1
      ⍬⍳ 'QAPLAPLAPLLPA'
1 1 1 1 1 1 1 1 1 1 1 1 1
      1⍳ 'QAPLAPLAPLLPA'
2 2 2 2 2 2 2 2 2 2 2 2 2
      ''⍳ 'QAPLAPLAPLLPA'
1 1 1 1 1 1 1 1 1 1 1 1 1
      ' '⍳ 'QAPLAPLAPLLPA'
2 2 2 2 2 2 2 2 2 2 2 2 2
      '  '⍳ 'QAPLAPLAPLLPA'
3 3 3 3 3 3 3 3 3 3 3 3 3
@end example

@node Shape Of
@section Shape Of
@cindex Shape Of

Monadic function.

The length of each axis of ⍵.

@example
3 3
      A←3 3 4⍴'ABCD'
      ⍴A
3 3 4
      A←3 3 4 5⍴'ABCD'
      ⍴A
3 3 4 5
@end example

@node Reshape
@section Reshape
@cindex Reshape

An array with the contents of ⍵ spread out across axes of length(s) ⍺.

If the length of ⍵ is more than the combined length of the axes specified by
⍺, ⍵ is truncated to fit.

If the length of ⍵ is less than the combined length of the axes specified by
⍺, elements are repeated as needed.
@example
      3⍴'ABCD'
ABC
      30⍴'ABCD'
ABCDABCDABCDABCDABCDABCDABCDAB
      3 3⍴'ABCD'
ABC
DAB
CDA
      3 30⍴'ABCD'
ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB
      4 3 30⍴'ABCD'
ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB

CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD

ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB

CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD
       2 4 3 30⍴'ABCD'
ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB

CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD

ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB

CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD


ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB

CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD

ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB

CDABCDABCDABCDABCDABCDABCDABCD
ABCDABCDABCDABCDABCDABCDABCDAB
CDABCDABCDABCDABCDABCDABCDABCD
@end example

@node Reverse
@section Reverse
@cindex Reverse

An array representing ⍵ in the opposite order, according to a specific axis.

@example
      ⌽'ABCD'
DCBA
      ⌽'ABCD' 'EFGH'
 EFGH ABCD

      ⌽[0]'ABCD' 'EFGH'
 ABCD EFGH
      ⌽[1]'ABCD' 'EFGH'
 EFGH ABCD
      ⌽ 1 2 3 4 5 6 7 8
8 7 6 5 4 3 2 1
      ⌽'ABCD'
DCBA
      A←3 3 3⍴⍳27
      A
 1  2  3
 4  5  6
 7  8  9

10 11 12
13 14 15
16 17 18

19 20 21
22 23 24
25 26 27
      ⌽A
 3  2  1
 6  5  4
 9  8  7

12 11 10
15 14 13
18 17 16

21 20 19
24 23 22
27 26 25
      ⌽[2]A
 7  8  9
 4  5  6
 1  2  3

16 17 18
13 14 15
10 11 12

25 26 27
22 23 24
19 20 21
      ⌽[3]A
 3  2  1
 6  5  4
 9  8  7

12 11 10
15 14 13
18 17 16

21 20 19
24 23 22
27 26 25
@end example

@node Rotate
@section Rotate
@cindex Rotate

An array with the elements of ⍵ rotated ⍺ positionsalong a specific axis.

@example
       A←3 3 3⍴⍳27
      A
 1  2  3
 4  5  6
 7  8  9

10 11 12
13 14 15
16 17 18

19 20 21
22 23 24
25 26 27
      2⌽A
 3  1  2
 6  4  5
 9  7  8

12 10 11
15 13 14
18 16 17

21 19 20
24 22 23
27 25 26
      2⌽[2]A
 7  8  9
 1  2  3
 4  5  6

16 17 18
10 11 12
13 14 15

25 26 27
19 20 21
22 23 24
      2⌽[3]A
 3  1  2
 6  4  5
 9  7  8

12 10 11
15 13 14
18 16 17

21 19 20
24 22 23
27 25 26
@end example

@node Transpose
@section Transpose
@cindex Transpose

An array identical to ⍵, but with its axes reversed.

@example
      A←3 3 3⍴⍳27
      A
 1  2  3
 4  5  6
 7  8  9

10 11 12
13 14 15
16 17 18

19 20 21
22 23 24
25 26 27
      ⍉A
1 10 19
4 13 22
7 16 25

2 11 20
5 14 23
8 17 26

3 12 21
6 15 24
9 18 27
      B←3 3⍴⍳9
      B
1 2 3
4 5 6
7 8 9
      ⍉B
1 4 7
2 5 8
3 6 9
@end example

@node Rearrange
@section Rearrange
@cindex Rearrange

An array with the same content as ⍵, but with each original axis moved
according to ⍺.

⍺ must be a numeric vector of indices of length equal to the number of axes
in ⍵, and with each index present exactly once.

@example
      A←3 3 3⍴⍳27
      A
 1  2  3
 4  5  6
 7  8  9

10 11 12
13 14 15
16 17 18

19 20 21
22 23 24
25 26 27
      1 2 3⍉A
 1  2  3
 4  5  6
 7  8  9

10 11 12
13 14 15
16 17 18

19 20 21
22 23 24
25 26 27
      1 3 2⍉A
 1  4  7
 2  5  8
 3  6  9

10 13 16
11 14 17
12 15 18

19 22 25
20 23 26
21 24 27
      3 2 1⍉A
1 10 19
4 13 22
7 16 25

2 11 20
5 14 23
8 17 26

3 12 21
6 15 24
9 18 27
      B←3 3⍴⍳9
      B
1 2 3
4 5 6
7 8 9
      2 1⍉B
1 4 7
2 5 8
3 6 9
      1 2⍉B
1 2 3
4 5 6
7 8 9
@end example

@node First
@section First
@cindex First

The first member of ⍵.

@example
      ↑ 1 2 3
1
      ↑ 'Hello'
H
      ↑ 'Hello' 'World'
Hello
@end example

@node Take
@section Take
@cindex Take

The first ⍺ elements of ⍵. If ⍺ is negative, the last |⍺ elements of ⍵.

@example
      2 ↑ 1 2 3
1 2
      ¯2 ↑ 1 2 3
2 3
      ¯1↑ 'Hello' 'World'
 World
@end example

@node Drop
@section Drop
@cindex Drop

⍵ with the first ⍺ elements removed. If ⍺ is negative, ⍵ with the last |⍺
elements removed.

@example
      3 ↓ 'Hello'
lo
      ¯3 ↓ 'Hello'
He
@end example

@node Enclose
@section Enclose
@cindex Enclose

A nested scalar representing the contents of ⍵.

This allows us to treat an array as a single unit in computations. If used
with a bracket index, enclose just those axes.

@example
      1 2 3 + 4 5 6
5 7 9
      1 2 3 + ⊂ 4 5 6
 5 6 7  6 7 8  7 8 9
      B←3 3⍴⍳9
      B
1 2 3
4 5 6
7 8 9
      ⊂[1]B
 1 4 7  2 5 8  3 6 9
      ⊂[2]B
 1 2 3  4 5 6  7 8 9
@end example

@node Partition
@section Partition
@cindex Partition

An array representing the contents of ⍵ split in one of two ways: If ⍺ is
boolean, every false (0) run indicates a split (and a dropped member). If ⍺
is numeric, increasing numbers indicate different members of ⍵, and decreasing numbers do not.

The lengths of ⍺ and ⍵ must match.

@example
      1 1 1 1 1 2 3 3 3 3 3 4 ⊂ 'Hello World!'
╔═══════════════════════╗
║┏→━━━━┓ ┏→┓ ┏→━━━━┓ ┏→┓║
║┃Hello┃ ┃ ┃ ┃World┃ ┃!┃║
║┗━━━━━┛ ┗━┛ ┗━━━━━┛ ┗━┛║
╚═══════════════════════╝
      1 1 1 1 1 2 1 1 1 1 1 2 ⊂ 'Hello World!'
╔════════════════════╗
║┏→━━━━┓ ┏→━━━━━┓ ┏→┓║
║┃Hello┃ ┃ World┃ ┃!┃║
║┗━━━━━┛ ┗━━━━━━┛ ┗━┛║
╚════════════════════╝
      1 1 1 1 1 0 1 1 1 1 1 0 ⊂ 'Hello World!'
╔═══════════════╗
║┏→━━━━┓ ┏→━━━━┓║
║┃Hello┃ ┃World┃║
║┗━━━━━┛ ┗━━━━━┛║
╚═══════════════╝
@end example

@node Mix
@section Mix
@cindex Mix

An array identical to ⍵, but with its depth reduced by one. To allow for even
shapes, empty items (0 for numerics, and ' ' for strings) are inserted as
needed.

@example
⊃1 2 3 4 5 6 7 8
╔═══════════════╗
║1 2 3 4 5 6 7 8║
╚═══════════════╝
       1 2 3 4 5 6 7 8
╔═══════════════╗
║1 2 3 4 5 6 7 8║
╚═══════════════╝
       ⊃(1 2 3 4) (5 6 7 8 9)
╔═════════╗
║1 2 3 4 0║
║5 6 7 8 9║
╚═════════╝
       ≡(1 2 3 4) (5 6 7 8 9)
╔═╗
║2║
╚═╝
       ≡⊃(1 2 3 4) (5 6 7 8 9)
╔═╗
║1║
╚═╝
       ≡(1 2 (3 4)) (5 6 (7 8 9))
╔═╗
║3║
╚═╝
       ⊃(1 2 (3 4)) (5 6 (7 8 9))
╔═══════════╗
║1 2 ┏→━━┓  ║
║    ┃3 4┃  ║
║    ┗━━━┛  ║
║5 6 ┏→━━━━┓║
║    ┃7 8 9┃║
║    ┗━━━━━┛║
╚═══════════╝
       ⊃⊃(1 2 (3 4)) (5 6 (7 8 9))
╔═════╗
║1 0 0║
║2 0 0║
║3 4 0║
║     ║
║5 0 0║
║6 0 0║
║7 8 9║
╚═════╝
@end example

@node Pick
@section Pick
@cindex Pick

The element of ⍵ at the position specified by ⍺.

At each level of specification, ⍺ must be the correct shape: a single number
for a vector, a two element vector for a matrix, etc.

@example
      A←'FIRST' 'SECOND' 'THIRD'
      ⍴A
╔═╗
║3║
╚═╝
      2⊃A
╔══════╗
║SECOND║
╚══════╝
      2 3⊃A
╔═╗
║C║
╚═╝
      A←(1 'FIRST') (2 'SECOND') (3 'THIRD')
      ⍴A
╔═╗
║3║
╚═╝
      3⊃A
╔═════════╗
║3 ┏→━━━━┓║
║  ┃THIRD┃║
║  ┗━━━━━┛║
╚═════════╝
      3 2⊃A
╔═════╗
║THIRD║
╚═════╝
      3 2 1⊃A
╔═╗
║T║
╚═╝
      G←2 3⍴('ABC' 1)('DEF' 2)('GHI' 3)('JKL' 4)('MNO' 5)('PQR' 6)
      G
╔═════════════════════════════╗
║┏→━━━━━━┓ ┏→━━━━━━┓ ┏→━━━━━━┓║
║┃┏→━━┓ 1┃ ┃┏→━━┓ 2┃ ┃┏→━━┓ 3┃║
║┃┃ABC┃  ┃ ┃┃DEF┃  ┃ ┃┃GHI┃  ┃║
║┃┗━━━┛  ┃ ┃┗━━━┛  ┃ ┃┗━━━┛  ┃║
║┗ϵ━━━━━━┛ ┗ϵ━━━━━━┛ ┗ϵ━━━━━━┛║
║┏→━━━━━━┓ ┏→━━━━━━┓ ┏→━━━━━━┓║
║┃┏→━━┓ 4┃ ┃┏→━━┓ 5┃ ┃┏→━━┓ 6┃║
║┃┃JKL┃  ┃ ┃┃MNO┃  ┃ ┃┃PQR┃  ┃║
║┃┗━━━┛  ┃ ┃┗━━━┛  ┃ ┃┗━━━┛  ┃║
║┗ϵ━━━━━━┛ ┗ϵ━━━━━━┛ ┗ϵ━━━━━━┛║
╚═════════════════════════════╝
      (⊂2 1)⊃G
╔═══════╗
║┏→━━┓ 4║
║┃JKL┃  ║
║┗━━━┛  ║
╚═══════╝
      (⊂2 1)⊃G
╔═══════╗
║┏→━━┓ 4║
║┃JKL┃  ║
║┗━━━┛  ║
╚═══════╝
      (2 1) 1⊃G
╔═══╗
║JKL║
╚═══╝
      (2 1) 1 2⊃G
╔═╗
║K║
╚═╝
@end example

@node Ravel
@section Ravel
@cindex Ravel

A vector containing the elements of ⍵ in left-to-right, top-to-bottom,
out-to-in (etc) order.

Equivalent to reshape on ⍵ with its number of members as ⍺. Can be undone
with the original shape of ⍵.

@example
      J←2 3 4⍴⍳24
      J
╔═══════════╗
║ 1  2  3  4║
║ 5  6  7  8║
║ 9 10 11 12║
║           ║
║13 14 15 16║
║17 18 19 20║
║21 22 23 24║
╚═══════════╝
      ,J
╔══════════════════════════════════════════════════════════════╗
║1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24║
╚══════════════════════════════════════════════════════════════╝
      24⍴J
╔══════════════════════════════════════════════════════════════╗
║1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24║
╚══════════════════════════════════════════════════════════════╝

@end example

@node Catenate
@section Catenate
@cindex Catenate

Append ⍵ to ⍺ along a specific axis.

@example
      1 2 3 , 4 5 6
╔═══════════╗
║1 2 3 4 5 6║
╚═══════════╝
      1 (2 3) , 4 (5 6)
╔═══════════════╗
║1 ┏→━━┓ 4 ┏→━━┓║
║  ┃2 3┃   ┃5 6┃║
║  ┗━━━┛   ┗━━━┛║
╚═══════════════╝
      K , 10 11 12
╔════════╗
║1 2 3 10║
║4 5 6 11║
║7 8 9 12║
╚════════╝
      K ⍪ 10 11 12
╔════════╗
║ 1  2  3║
║ 4  5  6║
║ 7  8  9║
║10 11 12║
╚════════╝
      'a' , 'b'
╔══╗
║ab║
╚══╝
@end example

@node Each
@section Each
@cindex Each

A function which returns the result of applying ⍶ to each element of ⍵.

Can be used with monadic or dyadic ⍶.

@example
      1 , 2 3 4
╔═══════╗
║1 2 3 4║
╚═══════╝
      1 ,¨ 2 3 4
╔═════════════════╗
║┏→━━┓ ┏→━━┓ ┏→━━┓║
║┃1 2┃ ┃1 3┃ ┃1 4┃║
║┗━━━┛ ┗━━━┛ ┗━━━┛║
╚═════════════════╝
      ⌽(1 ,¨ 2 3 4)
╔═════════════════╗
║┏→━━┓ ┏→━━┓ ┏→━━┓║
║┃1 4┃ ┃1 3┃ ┃1 2┃║
║┗━━━┛ ┗━━━┛ ┗━━━┛║
╚═════════════════╝
      ⌽¨(1 ,¨ 2 3 4)
╔═════════════════╗
║┏→━━┓ ┏→━━┓ ┏→━━┓║
║┃2 1┃ ┃3 1┃ ┃4 1┃║
║┗━━━┛ ┗━━━┛ ┗━━━┛║
╚═════════════════╝
      ]BOXING 0
      ,¨ (2 3⍴⍳6) (3 4⍴⍳12) (4 5⍴⍳20)
 1 2 3 4 5 6  1 2 3 4 5 6 7 8 9 10 11 12  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
      16 17 18 19 20
@end example

@node Inner Product
@section Inner Product
@cindex Inner Product

Dyadic Operator.

A dyadic function which returns the result of applying ⍹ between ⍺ and ⍵, and
then ⍶ between the result thereof.

⍶ and ⍹ must be dyadic. Equavalent to doing a Reduction of ⍶ on the result of
⍹.

@example
8
      1 2 3 4 5 +.× 5 4 3 2 1
35
      1 2 3 4 5 × 5 4 3 2 1
5 8 9 8 5
      +/1 2 3 4 5 × 5 4 3 2 1
35
@end example

@node Outer Product
@section Outer Product
@cindex Outer Product

Monadic Operator.

A function that will return the result of applying ⍹ using each element of
both ⍺ and ⍵ with each other, exhaustively.

@example
      X←1 2 3
      Y←4 5 6
      X ∘., Y
 1 4  1 5  1 6
 2 4  2 5  2 6
 3 4  3 5  3 6
      X ∘.× Y
 4  5  6
 8 10 12
12 15 18
      X ∘.+ Y
5 6 7
6 7 8
7 8 9
@end example

@node Commute
@section Commute
@cindex Commute

A function that applies ⍶ while modifying the supplied ⍺ and ⍵: If the
function is used monadically, apply ⍶ to ⍵, using ⍵ as both ⍺ and ⍵
("Self"). If the function is used dyadically, use ⍺ as ⍵ and ⍵ as ⍺ ("Swap").


⍶ must be a dyadic function.

@example
      +⍨1 2 3
2 4 6
      ,⍨1 2 3
1 2 3 1 2 3
      =⍨1 2 3
1 1 1
      1 2 3 - 4 5 6
¯3 ¯3 ¯3
      1 2 3 -⍨ 4 5 6
3 3 3
@end example

@node Indices
@section Indices
@cindex Indices

An array showing the non-zero indices of ⍵. If ⍵ is boolean, each resulting
index is shown once. If ⍵ is numeric, each index is repeated a number of
times equal to the magnitude of the number at that index.

No member of ⍵ can be negative or alphabetical.

@example
      ⍸ 0 1 0 0 1 0 1
2 5 7
      ⍸ 0 1 0 0 1 0 2
2 5 7 7
      ⍸ 0 1 0 0 1 0 4
2 5 7 7 7 7
      ⍸ 0 1 0 0 1 0 40
2 5 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
      7 7
@end example

@node Power Operator
@section Power Operator
@cindex Power Operator

Returns a function based on its arguments. In general, applies ⍶ repeatedly,
based on ⍹, to ⍵. ⍺ is bound to ⍶ if it is present (⍺⍶⍣⍹⍵=⍺∘⍶⍣⍹⍵). The major
differetiating factor is ⍹: If ⍹ is an integer, apply ⍶ to ⍵ that many
times. If ⍹ is a dyadic function that returns a boolean singleton, apply ⍶ to
⍵ until ⍹ evaluates to true with this iteration as ⍺ and the previous
iteration as ⍵.

⍺ is bound to ⍶ if present. ⍹ must either be an integer or a function that
returns 0 or 1 (boolean singleton). both ⍺ and ⍵ must be appropriate
arguments for ⍶.

If ×⍹ = ¯1, then apply the inverse of ⍶ to ⍵, |⍹ times.
@example
      1(+⍣3)5
8
      2(+⍣3)5
11
      2(+⍣¯1)5
3
@end example

@node Identity
@section Identity
@cindex Identity

⍵, as it is.

Useful for many things, but especially for wrapping a calculation as the ⍵ to
another function.

@example
      ⊢1
1
      ⊢1 1
1 1
      ⊢2 3⍴⍳6
1 2 3
4 5 6
      1+⊢2 3⍴⍳6
2 3 4
5 6 7
@end example

@node Right
@section Right
@cindex Right

⍵, as it is.

Nearly identical to Identity, but specifically ignoring the ⍺
argument. Useful for tacit programming and other fun logical tricks.

@example
      ⊢1
1
      2⊢1
1
      2⊢2 3⍴⍳6
1 2 3
4 5 6
      222 222 222⊢2 3⍴⍳6
1 2 3
4 5 6
@end example

@node Hide
@section Hide
@cindex Hide

@{0@}, or a shy (not printed) 0, instead of ⍵.

Useful for side effects and restructuring.

@example
      ⊣1
      ⊣2
      ⊣2 3⍴⍳6
      X←⊣2 3⍴⍳6
      X
0
@end example

@node Left
@section Left
@cindex Left

⍺, as it is.

Nearly identical to Identity, but specifically ignoring the ⍵
argument. Useful for tacit programming and other fun logical tricks, and can
be used to discard a result if there is an optional ⍺.

@example
      2⊣1
2
      2⊣2 3⍴⍳6
2
      222 222 222⊣2 3⍴⍳6
222 222 222
@end example
